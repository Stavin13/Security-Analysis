
services:
  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    ports:
      - "5000:5000"
    volumes:
      - backend-instance:/app/instance
    env_file:
      - backend/.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s
    restart: always
    depends_on:
      - redis
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=development
      - FLASK_APP=main.py

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: always

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  backend-instance:
    driver: local
  redis-data:
    driver: local